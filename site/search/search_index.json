{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#findability","title":"Findability","text":"F1.  Identity Uniqueness The software has a proper, unique and persistent identifier. F1.1 Uniqueness of name The software has a unique name to identify it F1.2. Identifiability of version There is a scheme to uniquely and properly identify the software version.  F2. Existence of Metadata  The software is described with rich metadata, including scientific applicability. F2.1. Structured Metadata Metadata is adjusted to specific metadata formats F2.2. Standardized Metadata Metadata is described using accepted ontologies  F3. Searchability  How software can be found.  F3.1. Searchability in registries The software is included in the main software registries. F3.2. Searchability in software repositories The software is included in the main software repositories. F3.3. Searchability in search engines The software is indexed by search engines."},{"location":"indicators/F1_identity_uniqueness/","title":"F1. Identity Uniqueness","text":"<p>The software has a proper, unique and persistent identifier. The uniqueness of an identifier is a necessary condition to unambiguously refer to that resource, and that resource alone. </p>"},{"location":"indicators/F1_identity_uniqueness/#f11-uniqueness-of-name","title":"F1.1. Uniqueness of name","text":"<p>The software has a unique name to identify it </p> Why should we measure it? How do we measure it? Types it applies to The name is commonly used as the main identifier of a software. Each agent should have a unique name to avoid ambiguities. Different versions of the same software should share a name, but if substantial modifications in the algorithm are done, the identifier should change for the new piece of software. A name is valid. all"},{"location":"indicators/F1_identity_uniqueness/#f12-identifiability-of-version","title":"F1.2. Identifiability of version","text":"<p>There is a scheme to uniquely and properly identify the software version.</p> Why should we measure it? How do we measure it? Types it applies to A version scheme is necessary to refer to a specific release of a software and keep track of the incrementally different versions of the software. A version of the form X.X is considered valid. all"},{"location":"indicators/F2_existence_of_metadata/","title":"F2. Existence of Metadata","text":"<p>The software is described with rich metadata, including scientific applicability. Metadata makes finding through search engines and deciding if a agent is of interest possible.</p>"},{"location":"indicators/F2_existence_of_metadata/#f21-structured-metadata","title":"F2.1. Structured Metadata","text":"<p>Metadata is adjusted to specific metadata formats</p> Why should we measure it? How do we measure it? Types it applies to Specific formats are more machine readable, which increases its findability by search engines At least a source of structured metadata is considered valid. all"},{"location":"indicators/F2_existence_of_metadata/#f22-standardized-metadata","title":"F2.2. Standardized Metadata","text":"<p>Metadata is described using accepted ontologies </p> Why should we measure it? How do we measure it? Types it applies to The same piece of information about a software can be stated in many equivalent forms. Each agent being described with different terminology, with non specified meanings, makes metadata very hard to interpret. Automatic processing is also harder. When searching for a software with certain features, the lack of a consusuate terminology makes the process of searching slow and difficult. EDAM, bioschema all"},{"location":"indicators/F3_searchability/","title":"F3.  Searchability","text":"<p>How software can be found. There are multitude of mechanisms for scientists looking to find specific software</p>"},{"location":"indicators/F3_searchability/#f31-searchability-in-registries","title":"F3.1. Searchability in registries","text":"<p>The software is included in the main software registries.</p> Why should we measure it? How do we measure it? Types it applies to Software registries are the main resource scientists use when searching for software. At least one software registry among the instance sources is considered valid. all"},{"location":"indicators/F3_searchability/#f32-searchability-in-software-repositories","title":"F3.2. Searchability in software repositories","text":"<p>The software can be found in any of the major software repositories e.g. GitHub, GitLab, SourceForge,</p> Why should we measure it? How do we measure it? Types it applies to Software repositories can be an additional resource used by scientists when looking for software An associated software repository is considered valid. all"},{"location":"indicators/F3_searchability/#f33-searchability-in-literature","title":"F3.3. Searchability in literature","text":"<p>The software can be found in specialized literature services e.g. EuropePMC, PubMed, Journals Site, biorxiv</p> Why should we measure it? How do we measure it? Types it applies to Specialized literature is a good reference to find software, especially to discover new software At least one associated publication is considered valid. all"}]}